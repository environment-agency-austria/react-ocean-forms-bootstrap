// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Select /> meta.plaintext should correctly react to meta.plaintext 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Select
    field={
      Object {
        "disabled": false,
        "id": "mock-field",
        "name": "mock-field",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "",
      }
    }
    label="field0"
    meta={
      Object {
        "error": null,
        "isValidating": false,
        "plaintext": true,
        "stringFormatter": [MockFunction],
        "touched": false,
        "valid": true,
      }
    }
    multi={false}
    options={
      Array [
        Object {
          "label": "One",
          "value": "one",
        },
        Object {
          "label": "Two",
          "value": "two",
        },
      ]
    }
    placeholder="ojs_select_placeholder"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Input
        disabled={false}
        id="mock-field"
        name="mock-field"
        onBlur={[MockFunction]}
        onChange={[MockFunction]}
        plaintext={true}
        type="text"
        value=""
      >
        
      </Input>,
      "field": Object {
        "disabled": false,
        "id": "mock-field",
        "name": "mock-field",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "",
      },
      "inputSize": "9",
      "label": "field0",
      "labelClass": "text-right",
      "labelSize": "3",
      "meta": Object {
        "error": null,
        "isValidating": false,
        "plaintext": true,
        "stringFormatter": [MockFunction],
        "touched": false,
        "valid": true,
      },
      "multi": false,
      "options": Array [
        Object {
          "label": "One",
          "value": "one",
        },
        Object {
          "label": "Two",
          "value": "two",
        },
      ],
      "placeholder": "ojs_select_placeholder",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": "",
        "disabled": false,
        "id": "mock-field",
        "name": "mock-field",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "plaintext": true,
        "type": "text",
        "value": "",
      },
      "ref": null,
      "rendered": "",
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Input
          disabled={false}
          id="mock-field"
          name="mock-field"
          onBlur={[MockFunction]}
          onChange={[MockFunction]}
          plaintext={true}
          type="text"
          value=""
        >
          
        </Input>,
        "field": Object {
          "disabled": false,
          "id": "mock-field",
          "name": "mock-field",
          "onBlur": [MockFunction],
          "onChange": [MockFunction],
          "value": "",
        },
        "inputSize": "9",
        "label": "field0",
        "labelClass": "text-right",
        "labelSize": "3",
        "meta": Object {
          "error": null,
          "isValidating": false,
          "plaintext": true,
          "stringFormatter": [MockFunction],
          "touched": false,
          "valid": true,
        },
        "multi": false,
        "options": Array [
          Object {
            "label": "One",
            "value": "one",
          },
          Object {
            "label": "Two",
            "value": "two",
          },
        ],
        "placeholder": "ojs_select_placeholder",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "",
          "disabled": false,
          "id": "mock-field",
          "name": "mock-field",
          "onBlur": [MockFunction],
          "onChange": [MockFunction],
          "plaintext": true,
          "type": "text",
          "value": "",
        },
        "ref": null,
        "rendered": "",
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Select /> meta.plaintext should display the label property of the selected option in plaintext mode 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Select
    field={
      Object {
        "disabled": false,
        "id": "mock-field",
        "name": "mock-field",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": Object {
          "label": "Two",
          "value": "two",
        },
      }
    }
    label="field0"
    meta={
      Object {
        "error": null,
        "isValidating": false,
        "plaintext": true,
        "stringFormatter": [MockFunction],
        "touched": false,
        "valid": true,
      }
    }
    multi={false}
    options={
      Array [
        Object {
          "label": "One",
          "value": "one",
        },
        Object {
          "label": "Two",
          "value": "two",
        },
      ]
    }
    placeholder="ojs_select_placeholder"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Input
        disabled={false}
        id="mock-field"
        name="mock-field"
        onBlur={[MockFunction]}
        onChange={[MockFunction]}
        plaintext={true}
        type="text"
        value=""
      >
        Two
      </Input>,
      "field": Object {
        "disabled": false,
        "id": "mock-field",
        "name": "mock-field",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": Object {
          "label": "Two",
          "value": "two",
        },
      },
      "inputSize": "9",
      "label": "field0",
      "labelClass": "text-right",
      "labelSize": "3",
      "meta": Object {
        "error": null,
        "isValidating": false,
        "plaintext": true,
        "stringFormatter": [MockFunction],
        "touched": false,
        "valid": true,
      },
      "multi": false,
      "options": Array [
        Object {
          "label": "One",
          "value": "one",
        },
        Object {
          "label": "Two",
          "value": "two",
        },
      ],
      "placeholder": "ojs_select_placeholder",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": "Two",
        "disabled": false,
        "id": "mock-field",
        "name": "mock-field",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "plaintext": true,
        "type": "text",
        "value": "",
      },
      "ref": null,
      "rendered": "Two",
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Input
          disabled={false}
          id="mock-field"
          name="mock-field"
          onBlur={[MockFunction]}
          onChange={[MockFunction]}
          plaintext={true}
          type="text"
          value=""
        >
          Two
        </Input>,
        "field": Object {
          "disabled": false,
          "id": "mock-field",
          "name": "mock-field",
          "onBlur": [MockFunction],
          "onChange": [MockFunction],
          "value": Object {
            "label": "Two",
            "value": "two",
          },
        },
        "inputSize": "9",
        "label": "field0",
        "labelClass": "text-right",
        "labelSize": "3",
        "meta": Object {
          "error": null,
          "isValidating": false,
          "plaintext": true,
          "stringFormatter": [MockFunction],
          "touched": false,
          "valid": true,
        },
        "multi": false,
        "options": Array [
          Object {
            "label": "One",
            "value": "one",
          },
          Object {
            "label": "Two",
            "value": "two",
          },
        ],
        "placeholder": "ojs_select_placeholder",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "Two",
          "disabled": false,
          "id": "mock-field",
          "name": "mock-field",
          "onBlur": [MockFunction],
          "onChange": [MockFunction],
          "plaintext": true,
          "type": "text",
          "value": "",
        },
        "ref": null,
        "rendered": "Two",
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Select /> should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Select
    field={
      Object {
        "disabled": false,
        "id": "mock-field",
        "name": "mock-field",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "",
      }
    }
    label="field0"
    meta={
      Object {
        "error": null,
        "isValidating": false,
        "plaintext": false,
        "stringFormatter": [MockFunction] {
          "calls": Array [
            Array [
              "ojs_select_placeholder",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": "ojs_select_placeholder",
            },
          ],
        },
        "touched": false,
        "valid": true,
      }
    }
    multi={false}
    options={
      Array [
        Object {
          "label": "One",
          "value": "one",
        },
        Object {
          "label": "Two",
          "value": "two",
        },
      ]
    }
    placeholder="ojs_select_placeholder"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <StateManager
        className="react-select-control"
        defaultInputValue=""
        defaultMenuIsOpen={false}
        defaultValue={null}
        id="mock-field"
        isDisabled={false}
        isMulti={false}
        onBlur={[Function]}
        onChange={[Function]}
        options={
          Array [
            Object {
              "label": "One",
              "value": "one",
            },
            Object {
              "label": "Two",
              "value": "two",
            },
          ]
        }
        placeholder="ojs_select_placeholder"
      />,
      "field": Object {
        "disabled": false,
        "id": "mock-field",
        "name": "mock-field",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "",
      },
      "inputSize": "9",
      "label": "field0",
      "labelClass": "text-right",
      "labelSize": "3",
      "meta": Object {
        "error": null,
        "isValidating": false,
        "plaintext": false,
        "stringFormatter": [MockFunction] {
          "calls": Array [
            Array [
              "ojs_select_placeholder",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": "ojs_select_placeholder",
            },
          ],
        },
        "touched": false,
        "valid": true,
      },
      "multi": false,
      "options": Array [
        Object {
          "label": "One",
          "value": "one",
        },
        Object {
          "label": "Two",
          "value": "two",
        },
      ],
      "placeholder": "ojs_select_placeholder",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "className": "react-select-control",
        "defaultInputValue": "",
        "defaultMenuIsOpen": false,
        "defaultValue": null,
        "id": "mock-field",
        "isDisabled": false,
        "isMulti": false,
        "onBlur": [Function],
        "onChange": [Function],
        "options": Array [
          Object {
            "label": "One",
            "value": "one",
          },
          Object {
            "label": "Two",
            "value": "two",
          },
        ],
        "placeholder": "ojs_select_placeholder",
        "value": undefined,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <StateManager
          className="react-select-control"
          defaultInputValue=""
          defaultMenuIsOpen={false}
          defaultValue={null}
          id="mock-field"
          isDisabled={false}
          isMulti={false}
          onBlur={[Function]}
          onChange={[Function]}
          options={
            Array [
              Object {
                "label": "One",
                "value": "one",
              },
              Object {
                "label": "Two",
                "value": "two",
              },
            ]
          }
          placeholder="ojs_select_placeholder"
        />,
        "field": Object {
          "disabled": false,
          "id": "mock-field",
          "name": "mock-field",
          "onBlur": [MockFunction],
          "onChange": [MockFunction],
          "value": "",
        },
        "inputSize": "9",
        "label": "field0",
        "labelClass": "text-right",
        "labelSize": "3",
        "meta": Object {
          "error": null,
          "isValidating": false,
          "plaintext": false,
          "stringFormatter": [MockFunction] {
            "calls": Array [
              Array [
                "ojs_select_placeholder",
              ],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": "ojs_select_placeholder",
              },
            ],
          },
          "touched": false,
          "valid": true,
        },
        "multi": false,
        "options": Array [
          Object {
            "label": "One",
            "value": "one",
          },
          Object {
            "label": "Two",
            "value": "two",
          },
        ],
        "placeholder": "ojs_select_placeholder",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "className": "react-select-control",
          "defaultInputValue": "",
          "defaultMenuIsOpen": false,
          "defaultValue": null,
          "id": "mock-field",
          "isDisabled": false,
          "isMulti": false,
          "onBlur": [Function],
          "onChange": [Function],
          "options": Array [
            Object {
              "label": "One",
              "value": "one",
            },
            Object {
              "label": "Two",
              "value": "two",
            },
          ],
          "placeholder": "ojs_select_placeholder",
          "value": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
