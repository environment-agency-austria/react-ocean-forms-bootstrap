// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SelectBase /> meta.plaintext should correctly react to meta.plaintext 1`] = `
<FieldLine
  field={
    Object {
      "disabled": false,
      "id": "mock-field",
      "name": "mock-field",
      "onBlur": [MockFunction],
      "onChange": [MockFunction],
      "value": "",
    }
  }
  inputSize="9"
  label="field0"
  labelClass="text-right"
  labelSize="3"
  meta={
    Object {
      "error": null,
      "isRequired": false,
      "isValidating": false,
      "plaintext": true,
      "stringFormatter": [MockFunction],
      "touched": false,
      "valid": true,
    }
  }
  multi={false}
  options={
    Array [
      Object {
        "label": "One",
        "value": "one",
      },
      Object {
        "label": "Two",
        "value": "two",
      },
    ]
  }
  placeholder="ojs_select_placeholder"
  renderSelect={[MockFunction]}
>
  <Input
    disabled={false}
    id="mock-field"
    name="mock-field"
    onBlur={[MockFunction]}
    onChange={[MockFunction]}
    plaintext={true}
    type="text"
    value=""
  />
</FieldLine>
`;

exports[`<SelectBase /> meta.plaintext should display the label property of the selected option in plaintext mode (multi=true) 1`] = `
<FieldLine
  field={
    Object {
      "disabled": false,
      "id": "mock-field",
      "name": "mock-field",
      "onBlur": [MockFunction],
      "onChange": [MockFunction],
      "value": Array [
        Object {
          "label": "One",
          "value": "one",
        },
        Object {
          "label": "Two",
          "value": "two",
        },
      ],
    }
  }
  inputSize="9"
  label="field0"
  labelClass="text-right"
  labelSize="3"
  meta={
    Object {
      "error": null,
      "isRequired": false,
      "isValidating": false,
      "plaintext": true,
      "stringFormatter": [MockFunction],
      "touched": false,
      "valid": true,
    }
  }
  multi={true}
  options={
    Array [
      Object {
        "label": "One",
        "value": "one",
      },
      Object {
        "label": "Two",
        "value": "two",
      },
    ]
  }
  placeholder="ojs_select_placeholder"
  renderSelect={[MockFunction]}
>
  <Input
    disabled={false}
    id="mock-field"
    name="mock-field"
    onBlur={[MockFunction]}
    onChange={[MockFunction]}
    plaintext={true}
    type="text"
    value="One, Two"
  />
</FieldLine>
`;

exports[`<SelectBase /> meta.plaintext should display the label property of the selected option in plaintext mode 1`] = `
<FieldLine
  field={
    Object {
      "disabled": false,
      "id": "mock-field",
      "name": "mock-field",
      "onBlur": [MockFunction],
      "onChange": [MockFunction],
      "value": Object {
        "label": "Two",
        "value": "two",
      },
    }
  }
  inputSize="9"
  label="field0"
  labelClass="text-right"
  labelSize="3"
  meta={
    Object {
      "error": null,
      "isRequired": false,
      "isValidating": false,
      "plaintext": true,
      "stringFormatter": [MockFunction],
      "touched": false,
      "valid": true,
    }
  }
  multi={false}
  options={
    Array [
      Object {
        "label": "One",
        "value": "one",
      },
      Object {
        "label": "Two",
        "value": "two",
      },
    ]
  }
  placeholder="ojs_select_placeholder"
  renderSelect={[MockFunction]}
>
  <Input
    disabled={false}
    id="mock-field"
    name="mock-field"
    onBlur={[MockFunction]}
    onChange={[MockFunction]}
    plaintext={true}
    type="text"
    value="Two"
  />
</FieldLine>
`;

exports[`<SelectBase /> should render correctly 1`] = `
<FieldLine
  field={
    Object {
      "disabled": false,
      "id": "mock-field",
      "name": "mock-field",
      "onBlur": [MockFunction],
      "onChange": [MockFunction],
      "value": "",
    }
  }
  inputSize="9"
  label="field0"
  labelClass="text-right"
  labelSize="3"
  meta={
    Object {
      "error": null,
      "isRequired": false,
      "isValidating": false,
      "plaintext": false,
      "stringFormatter": [MockFunction] {
        "calls": Array [
          Array [
            "ojs_select_placeholder",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": "ojs_select_placeholder",
          },
        ],
      },
      "touched": false,
      "valid": true,
    }
  }
>
  <div>
    mock select with props
    {"id":"mock-field","inputId":"mock-field-input","isDisabled":false,"isMulti":false,"options":[{"value":"one","label":"One"},{"value":"two","label":"Two"}],"placeholder":"ojs_select_placeholder","className":"react-select-control"}
  </div>
</FieldLine>
`;
