// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<RequiredMarker /> should render the field required marker if there is a required field validator 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RequiredMarker
    meta={
      Object {
        "error": null,
        "isValidating": false,
        "plaintext": false,
        "stringFormatter": [MockFunction] {
          "calls": Array [
            Array [
              "ojs_field_required",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": "ojs_field_required",
            },
          ],
        },
        "touched": false,
        "valid": true,
      }
    }
    validators={
      Array [
        [Function],
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        " ",
        "*",
      ],
      "className": "field-required",
      "title": "ojs_field_required",
    },
    "ref": null,
    "rendered": Array [
      " ",
      "*",
    ],
    "type": "span",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          " ",
          "*",
        ],
        "className": "field-required",
        "title": "ojs_field_required",
      },
      "ref": null,
      "rendered": Array [
        " ",
        "*",
      ],
      "type": "span",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
