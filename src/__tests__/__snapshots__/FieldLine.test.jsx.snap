// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<FieldLine /> should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FieldLine
    field={
      Object {
        "disabled": false,
        "name": "mock-field",
        "onBlur": [Function],
        "onChange": [Function],
        "value": "mock-value",
      }
    }
    label="label"
    meta={
      Object {
        "error": null,
        "isValidating": false,
        "plaintext": false,
        "stringFormatter": [MockFunction] {
          "calls": Array [
            Array [
              "label",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": "label",
            },
          ],
        },
        "touched": false,
        "valid": true,
      }
    }
  >
    <div
      id="mock-child"
    />
  </FieldLine>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Label
          className="text-right"
          sm="3"
          tag="label"
          widths={
            Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ]
          }
        >
          <InvalidAlert
            valid={true}
          />
          <ValidatingSpinner
            isValidating={false}
          />
          label
          <RequiredMarker
            meta={
              Object {
                "error": null,
                "isValidating": false,
                "plaintext": false,
                "stringFormatter": [MockFunction] {
                  "calls": Array [
                    Array [
                      "label",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": "label",
                    },
                  ],
                },
                "touched": false,
                "valid": true,
              }
            }
          />
        </Label>,
        <Col
          sm="9"
          tag="div"
          widths={
            Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ]
          }
        >
          <InputGroup
            tag="div"
          >
            <FieldLineAddon
              content={null}
              meta={
                Object {
                  "error": null,
                  "isValidating": false,
                  "plaintext": false,
                  "stringFormatter": [MockFunction] {
                    "calls": Array [
                      Array [
                        "label",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": "label",
                      },
                    ],
                  },
                  "touched": false,
                  "valid": true,
                }
              }
              type="prepend"
            />
            <div
              id="mock-child"
            />
            <FieldLineAddon
              content={null}
              meta={
                Object {
                  "error": null,
                  "isValidating": false,
                  "plaintext": false,
                  "stringFormatter": [MockFunction] {
                    "calls": Array [
                      Array [
                        "label",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": "label",
                      },
                    ],
                  },
                  "touched": false,
                  "valid": true,
                }
              }
              type="append"
            />
            <InfoAddonButton
              onClick={[Function]}
              plaintext={false}
            />
            <FieldError
              context={
                Object {
                  "stringFormatter": [MockFunction] {
                    "calls": Array [
                      Array [
                        "label",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": "label",
                      },
                    ],
                  },
                }
              }
              error={null}
              id="undefined_errors"
              invalid={false}
            />
          </InputGroup>
          <InfoAlert
            meta={
              Object {
                "error": null,
                "isValidating": false,
                "plaintext": false,
                "stringFormatter": [MockFunction] {
                  "calls": Array [
                    Array [
                      "label",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": "label",
                    },
                  ],
                },
                "touched": false,
                "valid": true,
              }
            }
            onClose={[Function]}
            visible={false}
          />
        </Col>,
      ],
      "className": "",
      "row": true,
      "tag": "div",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <InvalidAlert
              valid={true}
            />,
            <ValidatingSpinner
              isValidating={false}
            />,
            "label",
            <RequiredMarker
              meta={
                Object {
                  "error": null,
                  "isValidating": false,
                  "plaintext": false,
                  "stringFormatter": [MockFunction] {
                    "calls": Array [
                      Array [
                        "label",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": "label",
                      },
                    ],
                  },
                  "touched": false,
                  "valid": true,
                }
              }
            />,
          ],
          "className": "text-right",
          "for": undefined,
          "sm": "3",
          "tag": "label",
          "widths": Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "valid": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "isValidating": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "label",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "meta": Object {
                "error": null,
                "isValidating": false,
                "plaintext": false,
                "stringFormatter": [MockFunction] {
                  "calls": Array [
                    Array [
                      "label",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": "label",
                    },
                  ],
                },
                "touched": false,
                "valid": true,
              },
              "validators": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <InputGroup
              tag="div"
            >
              <FieldLineAddon
                content={null}
                meta={
                  Object {
                    "error": null,
                    "isValidating": false,
                    "plaintext": false,
                    "stringFormatter": [MockFunction] {
                      "calls": Array [
                        Array [
                          "label",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": "label",
                        },
                      ],
                    },
                    "touched": false,
                    "valid": true,
                  }
                }
                type="prepend"
              />
              <div
                id="mock-child"
              />
              <FieldLineAddon
                content={null}
                meta={
                  Object {
                    "error": null,
                    "isValidating": false,
                    "plaintext": false,
                    "stringFormatter": [MockFunction] {
                      "calls": Array [
                        Array [
                          "label",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": "label",
                        },
                      ],
                    },
                    "touched": false,
                    "valid": true,
                  }
                }
                type="append"
              />
              <InfoAddonButton
                onClick={[Function]}
                plaintext={false}
              />
              <FieldError
                context={
                  Object {
                    "stringFormatter": [MockFunction] {
                      "calls": Array [
                        Array [
                          "label",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": "label",
                        },
                      ],
                    },
                  }
                }
                error={null}
                id="undefined_errors"
                invalid={false}
              />
            </InputGroup>,
            <InfoAlert
              meta={
                Object {
                  "error": null,
                  "isValidating": false,
                  "plaintext": false,
                  "stringFormatter": [MockFunction] {
                    "calls": Array [
                      Array [
                        "label",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": "label",
                      },
                    ],
                  },
                  "touched": false,
                  "valid": true,
                }
              }
              onClose={[Function]}
              visible={false}
            />,
          ],
          "sm": "9",
          "tag": "div",
          "widths": Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <FieldLineAddon
                  content={null}
                  meta={
                    Object {
                      "error": null,
                      "isValidating": false,
                      "plaintext": false,
                      "stringFormatter": [MockFunction] {
                        "calls": Array [
                          Array [
                            "label",
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": "label",
                          },
                        ],
                      },
                      "touched": false,
                      "valid": true,
                    }
                  }
                  type="prepend"
                />,
                <div
                  id="mock-child"
                />,
                <FieldLineAddon
                  content={null}
                  meta={
                    Object {
                      "error": null,
                      "isValidating": false,
                      "plaintext": false,
                      "stringFormatter": [MockFunction] {
                        "calls": Array [
                          Array [
                            "label",
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": "label",
                          },
                        ],
                      },
                      "touched": false,
                      "valid": true,
                    }
                  }
                  type="append"
                />,
                <InfoAddonButton
                  onClick={[Function]}
                  plaintext={false}
                />,
                <FieldError
                  context={
                    Object {
                      "stringFormatter": [MockFunction] {
                        "calls": Array [
                          Array [
                            "label",
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": "label",
                          },
                        ],
                      },
                    }
                  }
                  error={null}
                  id="undefined_errors"
                  invalid={false}
                />,
              ],
              "tag": "div",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "content": null,
                  "meta": Object {
                    "error": null,
                    "isValidating": false,
                    "plaintext": false,
                    "stringFormatter": [MockFunction] {
                      "calls": Array [
                        Array [
                          "label",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": "label",
                        },
                      ],
                    },
                    "touched": false,
                    "valid": true,
                  },
                  "type": "prepend",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "mock-child",
                },
                "ref": null,
                "rendered": null,
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "content": null,
                  "meta": Object {
                    "error": null,
                    "isValidating": false,
                    "plaintext": false,
                    "stringFormatter": [MockFunction] {
                      "calls": Array [
                        Array [
                          "label",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": "label",
                        },
                      ],
                    },
                    "touched": false,
                    "valid": true,
                  },
                  "type": "append",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "info": undefined,
                  "onClick": [Function],
                  "plaintext": false,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "context": Object {
                    "stringFormatter": [MockFunction] {
                      "calls": Array [
                        Array [
                          "label",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": "label",
                        },
                      ],
                    },
                  },
                  "error": null,
                  "id": "undefined_errors",
                  "invalid": false,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "info": undefined,
              "meta": Object {
                "error": null,
                "isValidating": false,
                "plaintext": false,
                "stringFormatter": [MockFunction] {
                  "calls": Array [
                    Array [
                      "label",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": "label",
                    },
                  ],
                },
                "touched": false,
                "valid": true,
              },
              "onClose": [Function],
              "visible": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Label
            className="text-right"
            sm="3"
            tag="label"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            <InvalidAlert
              valid={true}
            />
            <ValidatingSpinner
              isValidating={false}
            />
            label
            <RequiredMarker
              meta={
                Object {
                  "error": null,
                  "isValidating": false,
                  "plaintext": false,
                  "stringFormatter": [MockFunction] {
                    "calls": Array [
                      Array [
                        "label",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": "label",
                      },
                    ],
                  },
                  "touched": false,
                  "valid": true,
                }
              }
            />
          </Label>,
          <Col
            sm="9"
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            <InputGroup
              tag="div"
            >
              <FieldLineAddon
                content={null}
                meta={
                  Object {
                    "error": null,
                    "isValidating": false,
                    "plaintext": false,
                    "stringFormatter": [MockFunction] {
                      "calls": Array [
                        Array [
                          "label",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": "label",
                        },
                      ],
                    },
                    "touched": false,
                    "valid": true,
                  }
                }
                type="prepend"
              />
              <div
                id="mock-child"
              />
              <FieldLineAddon
                content={null}
                meta={
                  Object {
                    "error": null,
                    "isValidating": false,
                    "plaintext": false,
                    "stringFormatter": [MockFunction] {
                      "calls": Array [
                        Array [
                          "label",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": "label",
                        },
                      ],
                    },
                    "touched": false,
                    "valid": true,
                  }
                }
                type="append"
              />
              <InfoAddonButton
                onClick={[Function]}
                plaintext={false}
              />
              <FieldError
                context={
                  Object {
                    "stringFormatter": [MockFunction] {
                      "calls": Array [
                        Array [
                          "label",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": "label",
                        },
                      ],
                    },
                  }
                }
                error={null}
                id="undefined_errors"
                invalid={false}
              />
            </InputGroup>
            <InfoAlert
              meta={
                Object {
                  "error": null,
                  "isValidating": false,
                  "plaintext": false,
                  "stringFormatter": [MockFunction] {
                    "calls": Array [
                      Array [
                        "label",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": "label",
                      },
                    ],
                  },
                  "touched": false,
                  "valid": true,
                }
              }
              onClose={[Function]}
              visible={false}
            />
          </Col>,
        ],
        "className": "",
        "row": true,
        "tag": "div",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <InvalidAlert
                valid={true}
              />,
              <ValidatingSpinner
                isValidating={false}
              />,
              "label",
              <RequiredMarker
                meta={
                  Object {
                    "error": null,
                    "isValidating": false,
                    "plaintext": false,
                    "stringFormatter": [MockFunction] {
                      "calls": Array [
                        Array [
                          "label",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": "label",
                        },
                      ],
                    },
                    "touched": false,
                    "valid": true,
                  }
                }
              />,
            ],
            "className": "text-right",
            "for": undefined,
            "sm": "3",
            "tag": "label",
            "widths": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "valid": true,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "isValidating": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "label",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "meta": Object {
                  "error": null,
                  "isValidating": false,
                  "plaintext": false,
                  "stringFormatter": [MockFunction] {
                    "calls": Array [
                      Array [
                        "label",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": "label",
                      },
                    ],
                  },
                  "touched": false,
                  "valid": true,
                },
                "validators": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <InputGroup
                tag="div"
              >
                <FieldLineAddon
                  content={null}
                  meta={
                    Object {
                      "error": null,
                      "isValidating": false,
                      "plaintext": false,
                      "stringFormatter": [MockFunction] {
                        "calls": Array [
                          Array [
                            "label",
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": "label",
                          },
                        ],
                      },
                      "touched": false,
                      "valid": true,
                    }
                  }
                  type="prepend"
                />
                <div
                  id="mock-child"
                />
                <FieldLineAddon
                  content={null}
                  meta={
                    Object {
                      "error": null,
                      "isValidating": false,
                      "plaintext": false,
                      "stringFormatter": [MockFunction] {
                        "calls": Array [
                          Array [
                            "label",
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": "label",
                          },
                        ],
                      },
                      "touched": false,
                      "valid": true,
                    }
                  }
                  type="append"
                />
                <InfoAddonButton
                  onClick={[Function]}
                  plaintext={false}
                />
                <FieldError
                  context={
                    Object {
                      "stringFormatter": [MockFunction] {
                        "calls": Array [
                          Array [
                            "label",
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": "label",
                          },
                        ],
                      },
                    }
                  }
                  error={null}
                  id="undefined_errors"
                  invalid={false}
                />
              </InputGroup>,
              <InfoAlert
                meta={
                  Object {
                    "error": null,
                    "isValidating": false,
                    "plaintext": false,
                    "stringFormatter": [MockFunction] {
                      "calls": Array [
                        Array [
                          "label",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": "label",
                        },
                      ],
                    },
                    "touched": false,
                    "valid": true,
                  }
                }
                onClose={[Function]}
                visible={false}
              />,
            ],
            "sm": "9",
            "tag": "div",
            "widths": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <FieldLineAddon
                    content={null}
                    meta={
                      Object {
                        "error": null,
                        "isValidating": false,
                        "plaintext": false,
                        "stringFormatter": [MockFunction] {
                          "calls": Array [
                            Array [
                              "label",
                            ],
                          ],
                          "results": Array [
                            Object {
                              "isThrow": false,
                              "value": "label",
                            },
                          ],
                        },
                        "touched": false,
                        "valid": true,
                      }
                    }
                    type="prepend"
                  />,
                  <div
                    id="mock-child"
                  />,
                  <FieldLineAddon
                    content={null}
                    meta={
                      Object {
                        "error": null,
                        "isValidating": false,
                        "plaintext": false,
                        "stringFormatter": [MockFunction] {
                          "calls": Array [
                            Array [
                              "label",
                            ],
                          ],
                          "results": Array [
                            Object {
                              "isThrow": false,
                              "value": "label",
                            },
                          ],
                        },
                        "touched": false,
                        "valid": true,
                      }
                    }
                    type="append"
                  />,
                  <InfoAddonButton
                    onClick={[Function]}
                    plaintext={false}
                  />,
                  <FieldError
                    context={
                      Object {
                        "stringFormatter": [MockFunction] {
                          "calls": Array [
                            Array [
                              "label",
                            ],
                          ],
                          "results": Array [
                            Object {
                              "isThrow": false,
                              "value": "label",
                            },
                          ],
                        },
                      }
                    }
                    error={null}
                    id="undefined_errors"
                    invalid={false}
                  />,
                ],
                "tag": "div",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "content": null,
                    "meta": Object {
                      "error": null,
                      "isValidating": false,
                      "plaintext": false,
                      "stringFormatter": [MockFunction] {
                        "calls": Array [
                          Array [
                            "label",
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": "label",
                          },
                        ],
                      },
                      "touched": false,
                      "valid": true,
                    },
                    "type": "prepend",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "id": "mock-child",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "content": null,
                    "meta": Object {
                      "error": null,
                      "isValidating": false,
                      "plaintext": false,
                      "stringFormatter": [MockFunction] {
                        "calls": Array [
                          Array [
                            "label",
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": "label",
                          },
                        ],
                      },
                      "touched": false,
                      "valid": true,
                    },
                    "type": "append",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "info": undefined,
                    "onClick": [Function],
                    "plaintext": false,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "context": Object {
                      "stringFormatter": [MockFunction] {
                        "calls": Array [
                          Array [
                            "label",
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": "label",
                          },
                        ],
                      },
                    },
                    "error": null,
                    "id": "undefined_errors",
                    "invalid": false,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "info": undefined,
                "meta": Object {
                  "error": null,
                  "isValidating": false,
                  "plaintext": false,
                  "stringFormatter": [MockFunction] {
                    "calls": Array [
                      Array [
                        "label",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": "label",
                      },
                    ],
                  },
                  "touched": false,
                  "valid": true,
                },
                "onClose": [Function],
                "visible": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getSnapshotBeforeUpdate": true,
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
