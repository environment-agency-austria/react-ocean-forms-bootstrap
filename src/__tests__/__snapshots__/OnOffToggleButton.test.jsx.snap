// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<BaseOnOffToggleButton /> should render plaintext Button 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <OnOffToggleButton
    field={
      Object {
        "disabled": false,
        "id": "field0",
        "invalid": false,
        "name": "field0",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "",
      }
    }
    label="field0"
    meta={
      Object {
        "error": undefined,
        "isValidating": undefined,
        "plaintext": true,
        "stringFormatter": [MockFunction] {
          "calls": Array [
            Array [
              "on",
            ],
            Array [
              "off",
            ],
            Array [
              "on",
            ],
            Array [
              "off",
            ],
            Array [
              "on",
            ],
            Array [
              "off",
            ],
            Array [
              "on",
            ],
            Array [
              "off",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
          ],
        },
        "valid": true,
      }
    }
    offLabel="off"
    onLabel="on"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Input
        disabled={false}
        id="field0"
        invalid={false}
        name="field0"
        onBlur={[MockFunction]}
        onChange={[MockFunction]}
        plaintext={true}
        type="text"
        value=""
      >
        off
      </Input>,
      "field": Object {
        "disabled": false,
        "id": "field0",
        "invalid": false,
        "name": "field0",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "",
      },
      "info": undefined,
      "label": "field0",
      "meta": Object {
        "error": undefined,
        "isValidating": undefined,
        "plaintext": true,
        "stringFormatter": [MockFunction] {
          "calls": Array [
            Array [
              "on",
            ],
            Array [
              "off",
            ],
            Array [
              "on",
            ],
            Array [
              "off",
            ],
            Array [
              "on",
            ],
            Array [
              "off",
            ],
            Array [
              "on",
            ],
            Array [
              "off",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
          ],
        },
        "valid": true,
      },
      "offLabel": "off",
      "onLabel": "on",
      "prefix": undefined,
      "suffix": undefined,
      "validators": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": "off",
        "disabled": false,
        "id": "field0",
        "invalid": false,
        "name": "field0",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "plaintext": true,
        "type": "text",
        "value": "",
      },
      "ref": null,
      "rendered": "off",
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Input
          disabled={false}
          id="field0"
          invalid={false}
          name="field0"
          onBlur={[MockFunction]}
          onChange={[MockFunction]}
          plaintext={true}
          type="text"
          value=""
        >
          off
        </Input>,
        "field": Object {
          "disabled": false,
          "id": "field0",
          "invalid": false,
          "name": "field0",
          "onBlur": [MockFunction],
          "onChange": [MockFunction],
          "value": "",
        },
        "info": undefined,
        "label": "field0",
        "meta": Object {
          "error": undefined,
          "isValidating": undefined,
          "plaintext": true,
          "stringFormatter": [MockFunction] {
            "calls": Array [
              Array [
                "on",
              ],
              Array [
                "off",
              ],
              Array [
                "on",
              ],
              Array [
                "off",
              ],
              Array [
                "on",
              ],
              Array [
                "off",
              ],
              Array [
                "on",
              ],
              Array [
                "off",
              ],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": "on",
              },
              Object {
                "isThrow": false,
                "value": "off",
              },
              Object {
                "isThrow": false,
                "value": "on",
              },
              Object {
                "isThrow": false,
                "value": "off",
              },
              Object {
                "isThrow": false,
                "value": "on",
              },
              Object {
                "isThrow": false,
                "value": "off",
              },
              Object {
                "isThrow": false,
                "value": "on",
              },
              Object {
                "isThrow": false,
                "value": "off",
              },
            ],
          },
          "valid": true,
        },
        "offLabel": "off",
        "onLabel": "on",
        "prefix": undefined,
        "suffix": undefined,
        "validators": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "off",
          "disabled": false,
          "id": "field0",
          "invalid": false,
          "name": "field0",
          "onBlur": [MockFunction],
          "onChange": [MockFunction],
          "plaintext": true,
          "type": "text",
          "value": "",
        },
        "ref": null,
        "rendered": "off",
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`<BaseOnOffToggleButton /> should render without crashing 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <OnOffToggleButton
    field={
      Object {
        "disabled": false,
        "id": "field0",
        "invalid": false,
        "name": "field0",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "",
      }
    }
    label="field0"
    meta={
      Object {
        "error": undefined,
        "isValidating": undefined,
        "plaintext": false,
        "stringFormatter": [MockFunction] {
          "calls": Array [
            Array [
              "on",
            ],
            Array [
              "off",
            ],
            Array [
              "on",
            ],
            Array [
              "off",
            ],
            Array [
              "on",
            ],
            Array [
              "off",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
          ],
        },
        "valid": true,
      }
    }
    offLabel="off"
    onLabel="on"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <ButtonGroup
        id="field0"
        role="group"
        tag="div"
      >
        <Button
          active={false}
          color="primary"
          id="field0-on"
          onClick={[Function]}
          tag="button"
        >
          on
        </Button>
        <Button
          active={true}
          color="primary"
          id="field0-off"
          onClick={[Function]}
          tag="button"
        >
          off
        </Button>
      </ButtonGroup>,
      "field": Object {
        "disabled": false,
        "id": "field0",
        "invalid": false,
        "name": "field0",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "",
      },
      "info": undefined,
      "label": "field0",
      "meta": Object {
        "error": undefined,
        "isValidating": undefined,
        "plaintext": false,
        "stringFormatter": [MockFunction] {
          "calls": Array [
            Array [
              "on",
            ],
            Array [
              "off",
            ],
            Array [
              "on",
            ],
            Array [
              "off",
            ],
            Array [
              "on",
            ],
            Array [
              "off",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
            Object {
              "isThrow": false,
              "value": "on",
            },
            Object {
              "isThrow": false,
              "value": "off",
            },
          ],
        },
        "valid": true,
      },
      "offLabel": "off",
      "onLabel": "on",
      "prefix": undefined,
      "suffix": undefined,
      "validators": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Button
            active={false}
            color="primary"
            id="field0-on"
            onClick={[Function]}
            tag="button"
          >
            on
          </Button>,
          <Button
            active={true}
            color="primary"
            id="field0-off"
            onClick={[Function]}
            tag="button"
          >
            off
          </Button>,
        ],
        "id": "field0",
        "role": "group",
        "tag": "div",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "active": false,
            "children": "on",
            "color": "primary",
            "id": "field0-on",
            "onClick": [Function],
            "tag": "button",
          },
          "ref": null,
          "rendered": "on",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "active": true,
            "children": "off",
            "color": "primary",
            "id": "field0-off",
            "onClick": [Function],
            "tag": "button",
          },
          "ref": null,
          "rendered": "off",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <ButtonGroup
          id="field0"
          role="group"
          tag="div"
        >
          <Button
            active={false}
            color="primary"
            id="field0-on"
            onClick={[Function]}
            tag="button"
          >
            on
          </Button>
          <Button
            active={true}
            color="primary"
            id="field0-off"
            onClick={[Function]}
            tag="button"
          >
            off
          </Button>
        </ButtonGroup>,
        "field": Object {
          "disabled": false,
          "id": "field0",
          "invalid": false,
          "name": "field0",
          "onBlur": [MockFunction],
          "onChange": [MockFunction],
          "value": "",
        },
        "info": undefined,
        "label": "field0",
        "meta": Object {
          "error": undefined,
          "isValidating": undefined,
          "plaintext": false,
          "stringFormatter": [MockFunction] {
            "calls": Array [
              Array [
                "on",
              ],
              Array [
                "off",
              ],
              Array [
                "on",
              ],
              Array [
                "off",
              ],
              Array [
                "on",
              ],
              Array [
                "off",
              ],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": "on",
              },
              Object {
                "isThrow": false,
                "value": "off",
              },
              Object {
                "isThrow": false,
                "value": "on",
              },
              Object {
                "isThrow": false,
                "value": "off",
              },
              Object {
                "isThrow": false,
                "value": "on",
              },
              Object {
                "isThrow": false,
                "value": "off",
              },
            ],
          },
          "valid": true,
        },
        "offLabel": "off",
        "onLabel": "on",
        "prefix": undefined,
        "suffix": undefined,
        "validators": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Button
              active={false}
              color="primary"
              id="field0-on"
              onClick={[Function]}
              tag="button"
            >
              on
            </Button>,
            <Button
              active={true}
              color="primary"
              id="field0-off"
              onClick={[Function]}
              tag="button"
            >
              off
            </Button>,
          ],
          "id": "field0",
          "role": "group",
          "tag": "div",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": false,
              "children": "on",
              "color": "primary",
              "id": "field0-on",
              "onClick": [Function],
              "tag": "button",
            },
            "ref": null,
            "rendered": "on",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": true,
              "children": "off",
              "color": "primary",
              "id": "field0-off",
              "onClick": [Function],
              "tag": "button",
            },
            "ref": null,
            "rendered": "off",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
